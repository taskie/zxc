// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zxcrpc.proto

package zxcrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Client struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()    {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_751258ae3d860c69, []int{0}
}

func (m *Client) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Client.Unmarshal(m, b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Client.Marshal(b, m, deterministic)
}
func (m *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(m, src)
}
func (m *Client) XXX_Size() int {
	return xxx_messageInfo_Client.Size(m)
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Server struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Server) Reset()         { *m = Server{} }
func (m *Server) String() string { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()    {}
func (*Server) Descriptor() ([]byte, []int) {
	return fileDescriptor_751258ae3d860c69, []int{1}
}

func (m *Server) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Server.Unmarshal(m, b)
}
func (m *Server) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Server.Marshal(b, m, deterministic)
}
func (m *Server) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Server.Merge(m, src)
}
func (m *Server) XXX_Size() int {
	return xxx_messageInfo_Server.Size(m)
}
func (m *Server) XXX_DiscardUnknown() {
	xxx_messageInfo_Server.DiscardUnknown(m)
}

var xxx_messageInfo_Server proto.InternalMessageInfo

func (m *Server) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Job struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Command              []string `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_751258ae3d860c69, []int{2}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

type JobMessage struct {
	Job                  *Job     `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	Client               *Client  `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobMessage) Reset()         { *m = JobMessage{} }
func (m *JobMessage) String() string { return proto.CompactTextString(m) }
func (*JobMessage) ProtoMessage()    {}
func (*JobMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_751258ae3d860c69, []int{3}
}

func (m *JobMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobMessage.Unmarshal(m, b)
}
func (m *JobMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobMessage.Marshal(b, m, deterministic)
}
func (m *JobMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobMessage.Merge(m, src)
}
func (m *JobMessage) XXX_Size() int {
	return xxx_messageInfo_JobMessage.Size(m)
}
func (m *JobMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_JobMessage.DiscardUnknown(m)
}

var xxx_messageInfo_JobMessage proto.InternalMessageInfo

func (m *JobMessage) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *JobMessage) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

type JobResultMessage struct {
	Job                  *Job     `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	Client               *Client  `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
	ExitStatus           int32    `protobuf:"varint,3,opt,name=exit_status,json=exitStatus,proto3" json:"exit_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobResultMessage) Reset()         { *m = JobResultMessage{} }
func (m *JobResultMessage) String() string { return proto.CompactTextString(m) }
func (*JobResultMessage) ProtoMessage()    {}
func (*JobResultMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_751258ae3d860c69, []int{4}
}

func (m *JobResultMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobResultMessage.Unmarshal(m, b)
}
func (m *JobResultMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobResultMessage.Marshal(b, m, deterministic)
}
func (m *JobResultMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobResultMessage.Merge(m, src)
}
func (m *JobResultMessage) XXX_Size() int {
	return xxx_messageInfo_JobResultMessage.Size(m)
}
func (m *JobResultMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_JobResultMessage.DiscardUnknown(m)
}

var xxx_messageInfo_JobResultMessage proto.InternalMessageInfo

func (m *JobResultMessage) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *JobResultMessage) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *JobResultMessage) GetExitStatus() int32 {
	if m != nil {
		return m.ExitStatus
	}
	return 0
}

func init() {
	proto.RegisterType((*Client)(nil), "Client")
	proto.RegisterType((*Server)(nil), "Server")
	proto.RegisterType((*Job)(nil), "Job")
	proto.RegisterType((*JobMessage)(nil), "JobMessage")
	proto.RegisterType((*JobResultMessage)(nil), "JobResultMessage")
}

func init() { proto.RegisterFile("zxcrpc.proto", fileDescriptor_751258ae3d860c69) }

var fileDescriptor_751258ae3d860c69 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xed, 0xba, 0xb5, 0xf4, 0xe5, 0xa2, 0x39, 0x48, 0x10, 0x61, 0xa5, 0x20, 0xd4, 0x4b,
	0x0e, 0xdb, 0x9f, 0xe0, 0x76, 0x29, 0x78, 0x49, 0x4f, 0x7a, 0x91, 0xa4, 0x0d, 0x52, 0x69, 0x93,
	0x91, 0xbc, 0xc9, 0xf0, 0xaf, 0x97, 0x64, 0x8a, 0x22, 0xbd, 0x79, 0x4b, 0xbe, 0xdf, 0x97, 0xf0,
	0xbd, 0xef, 0x01, 0xf9, 0x38, 0xb9, 0x43, 0xc7, 0x0f, 0xce, 0xa2, 0xad, 0x6e, 0x21, 0x7b, 0x18,
	0x07, 0x6d, 0x90, 0x52, 0x58, 0x1a, 0x39, 0x69, 0x96, 0x94, 0x49, 0x5d, 0x88, 0x78, 0x0e, 0xb4,
	0xd5, 0xee, 0x5d, 0xbb, 0x59, 0xba, 0x85, 0xb4, 0xb1, 0x6a, 0x0e, 0x51, 0x06, 0x79, 0x67, 0xa7,
	0x49, 0x9a, 0x9e, 0x2d, 0xca, 0xb4, 0x2e, 0xc4, 0xf7, 0xb5, 0xda, 0x03, 0x34, 0x56, 0x3d, 0x6a,
	0xef, 0xe5, 0xab, 0xa6, 0xd7, 0x90, 0xbe, 0x59, 0x15, 0x9f, 0x92, 0xcd, 0x92, 0x37, 0x56, 0x89,
	0x20, 0xd0, 0x35, 0x64, 0x5d, 0x8c, 0xc5, 0x16, 0x11, 0xe5, 0xfc, 0x9c, 0x52, 0x7c, 0xc9, 0xd5,
	0x08, 0x97, 0xc1, 0xac, 0xfd, 0x71, 0xc4, 0xff, 0x7e, 0x46, 0xd7, 0x40, 0xf4, 0x69, 0xc0, 0x17,
	0x8f, 0x12, 0x8f, 0x9e, 0xa5, 0x65, 0x52, 0xaf, 0x04, 0x04, 0xa9, 0x8d, 0xca, 0xe6, 0x09, 0x56,
	0xcf, 0xa1, 0x34, 0x7a, 0x07, 0x64, 0x37, 0xf4, 0x2d, 0x4a, 0x87, 0x61, 0x74, 0xc2, 0x7f, 0x66,
	0xb9, 0xc9, 0xf9, 0xb9, 0xab, 0xea, 0x82, 0xde, 0x43, 0xb1, 0x1b, 0xfa, 0xbd, 0xe9, 0x83, 0xe9,
	0x8a, 0xff, 0x4d, 0xfa, 0xcb, 0xaa, 0xb2, 0xb8, 0x87, 0xed, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf9, 0x71, 0xa1, 0x11, 0x96, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ZxcRPCClient is the client API for ZxcRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZxcRPCClient interface {
	DidStartJob(ctx context.Context, in *JobMessage, opts ...grpc.CallOption) (*Server, error)
	DidEndJob(ctx context.Context, in *JobResultMessage, opts ...grpc.CallOption) (*Server, error)
}

type zxcrpcClient struct {
	cc *grpc.ClientConn
}

func NewZxcRPCClient(cc *grpc.ClientConn) ZxcRPCClient {
	return &zxcrpcClient{cc}
}

func (c *zxcrpcClient) DidStartJob(ctx context.Context, in *JobMessage, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/ZxcRPC/DidStartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zxcrpcClient) DidEndJob(ctx context.Context, in *JobResultMessage, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/ZxcRPC/DidEndJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZxcRPCServer is the server API for ZxcRPC service.
type ZxcRPCServer interface {
	DidStartJob(context.Context, *JobMessage) (*Server, error)
	DidEndJob(context.Context, *JobResultMessage) (*Server, error)
}

func RegisterZxcRPCServer(s *grpc.Server, srv ZxcRPCServer) {
	s.RegisterService(&_ZxcRPC_serviceDesc, srv)
}

func _ZxcRPC_DidStartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZxcRPCServer).DidStartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZxcRPC/DidStartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZxcRPCServer).DidStartJob(ctx, req.(*JobMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZxcRPC_DidEndJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobResultMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZxcRPCServer).DidEndJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZxcRPC/DidEndJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZxcRPCServer).DidEndJob(ctx, req.(*JobResultMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZxcRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ZxcRPC",
	HandlerType: (*ZxcRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DidStartJob",
			Handler:    _ZxcRPC_DidStartJob_Handler,
		},
		{
			MethodName: "DidEndJob",
			Handler:    _ZxcRPC_DidEndJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zxcrpc.proto",
}
